import React, { useEffect, useRef, useState } from "react";
import Button from "../../../src/components/buttons/Button";
import IconButton from "../../../src/components/buttons/IconButton";
import FlexBox from "../../../src/components/FlexBox";
import Icon from "../../../src/components/icon/Icon";
import DashboardLayout from "../../../src/components/layout/CustomerDashboardLayout";
import DashboardPageHeader from "../../../src/components/layout/DashboardPageHeader";
import Pagination from "../../../src/components/pagination/Pagination";
import TableRow from "../../../src/components/TableRow";
import Typography from "../../../src/components/Typography";
import { ModalHeader, Spinner } from "react-bootstrap";
import { FormControl, FormErrorMessage, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalOverlay, Select, useToast } from "@chakra-ui/react";
import provincesData from '../../data/province.json';
import districtsData from '../../data/district.json';
import wardsData from '../../data/ward.json';
import { AppThunkDispatch, RootState, useAppSelector } from "../../store/store";
import { useDispatch } from "react-redux";
import { addMyAddress, deleteMyAddress, getMyAddress } from "../../store/slices/user-slice";
import { District, Province, Ward } from "api/interface/user";
import { useNavigate } from "react-router-dom";


const AddressModal = ({
	isDialogOpen,
	setIsDialogOpen,
	formRef,
	contactName,
	handleContactNameChange,
	phoneError,
	handlePhoneChange,
	phone,
	province,
	handleProvinceChange,
	district,
	ward,
	handleDetailAddressChange,
	detailAddress,
	handleDistrictChange,
	handleWardChange,
	isSaveDisabled,
	saveAddress
}) => {

	return (
		<Modal isOpen={isDialogOpen} onClose={() => setIsDialogOpen(false)} >
			<ModalOverlay />
			<ModalContent>
				<ModalHeader style={{
					fontWeight: 'bold', fontSize: '20px', color: 'gray.800', textAlign: "center", marginTop: '20px'
				}}>
					Add New Address
				</ModalHeader>
				<ModalCloseButton />
				<ModalBody ref={formRef}>

					<FormControl isRequired isInvalid={contactName === ""}>
						<FormLabel>Contact Name</FormLabel>
						<Input value={contactName} onChange={handleContactNameChange} required />
						<FormErrorMessage>contact name is required</FormErrorMessage>
					</FormControl >

					<FormControl isRequired isInvalid={phoneError !== ""}>
						<FormLabel>Phone</FormLabel>
						<Input pattern="[0-9]{10}" value={phone} onChange={handlePhoneChange} required />
						<FormErrorMessage>{phoneError}</FormErrorMessage>
					</FormControl>

					<FormControl isRequired isInvalid={province === null}>
						<FormLabel>City/Province Name</FormLabel>
						<Select value={JSON.stringify(province)} onChange={handleProvinceChange} required>
							<option value="">Select a province</option>
							{Object.values(provinces).map((p) => (
								<option key={p.code} value={JSON.stringify(p)}>
									{p.name_with_type}
								</option>
							))}
						</Select>
					</FormControl>

					<FormControl isRequired isInvalid={district === null}>
						<FormLabel>District Name</FormLabel>
						<Select value={JSON.stringify(district)} onChange={handleDistrictChange} disabled={!province} required>
							<option value="">Select a district</option>
							{filteredDistricts.map((d) => (
								<option key={d.code} value={JSON.stringify(d)}>
									{d.name_with_type}
								</option>
							))}
						</Select>
					</FormControl>

					<FormControl isRequired isInvalid={ward === null}>
						<FormLabel>Ward Name</FormLabel>
						<Select value={JSON.stringify(ward)} onChange={handleWardChange} disabled={!district} required>
							<option value="">Select a ward</option>
							{filteredWards.map((w) => (
								<option key={w.code} value={JSON.stringify(w)}>
									{w.name_with_type}
								</option>
							))}
						</Select>
					</FormControl>

					<FormControl isRequired isInvalid={detailAddress === ''}>
						<FormLabel>Detail Address</FormLabel>
						<Input value={detailAddress} onChange={handleDetailAddressChange} required />
						<FormErrorMessage>
							detail address is required
						</FormErrorMessage>
					</FormControl>
				</ModalBody>
				<ModalFooter>
					<Button variant='ghost' color="red" mr={3} onClick={() => setIsDialogOpen(false)}>
						Close
					</Button>
					<Button variant='ghost' color='green'
						onClick={saveAddress}
						disabled={isSaveDisabled}
					>Save</Button>
				</ModalFooter>
			</ModalContent>
		</Modal>
	);
};


export default AddressModal;
